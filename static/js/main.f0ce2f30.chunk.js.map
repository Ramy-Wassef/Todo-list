{"version":3,"sources":["components/list.js","components/add.js","App.js","serviceWorker.js","index.js"],"names":["List","props","items","remove","list","length","map","item","key","id","className","name","age","onClick","Add","state","change","e","setState","Math","random","target","value","submit","preventDefault","additem","onSubmit","this","type","placeholder","onChange","Component","App","i","filter","im","n","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAiCeA,G,MA/BF,SAACC,GAAW,IAElBC,EAAkBD,EAAlBC,MAAQC,EAAUF,EAAVE,OAETC,EADOF,EAAMG,OAGnBH,EAAMI,IAAK,SAACC,GACZ,OACI,yBAAKC,IAAKD,EAAKE,IACf,0BAAMC,UAAU,QAASH,EAAKI,MAC9B,0BAAMD,UAAU,OAAQH,EAAKK,KAC7B,0BAAMF,UAAU,cAAcG,QAAU,WAAOV,EAAOI,EAAKE,MAA3D,WAKA,uCAKJ,OACA,yBAAKC,UAAU,QACX,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,UACCN,K,OCgBUU,E,2MAxCdC,MAAQ,CACJN,GAAG,GACHE,KAAK,GACLC,IAAI,I,EAGTI,OAAS,SAACC,GACV,EAAKC,SAAL,aACIT,GAAIU,KAAKC,UACRH,EAAEI,OAAOZ,GAAKQ,EAAEI,OAAOC,S,EAI5BC,OAAS,SAACN,GAEP,GADCA,EAAEO,iBACwB,KAAxBP,EAAEI,OAAOV,KAAKW,OAAuC,KAAvBL,EAAEI,OAAOT,IAAIU,MAC7C,OAAO,EAGP,EAAKrB,MAAMwB,QAAQ,EAAKV,OACxB,EAAKG,SAAS,CACVP,KAAK,GACLC,IAAI,M,wEAMJ,OACJ,6BACI,0BAAMc,SAAUC,KAAKJ,QACrB,2BAAOb,UAAU,MAAMkB,KAAK,OAAOC,YAAY,aAAapB,GAAG,OAAOqB,SAAUH,KAAKX,OAAQM,MAAOK,KAAKZ,MAAMJ,OAC/G,2BAAQD,UAAU,MAAMkB,KAAK,SAASC,YAAY,YAAYpB,GAAG,MAAMqB,SAAUH,KAAKX,OAAQM,MAAOK,KAAKZ,MAAMH,MAChH,2BAAOF,UAAU,gBAAgBkB,KAAK,SAASN,MAAM,c,GAnC3CS,aC2CHC,E,2MArCfjB,MAAQ,CAERb,MAAQ,CACJ,CAACO,GAAG,EAAIE,KAAM,OAASC,IAAK,IAC5B,CAACH,GAAG,EAAIE,KAAM,QAAUC,IAAK,IAC7B,CAACH,GAAG,EAAIE,KAAM,QAAUC,IAAK,M,EAIjCT,OAAS,SAAC8B,GACV,IAAI/B,EAAQ,EAAKa,MAAMb,MAAMgC,OAAQ,SAACC,GACpC,OAAOA,EAAG1B,KAAOwB,IAEnB,EAAKf,SAAS,CACZhB,W,EAIFuB,QAAU,SAACW,GACX,IAAIlC,EAAQ,EAAKa,MAAMb,MACvBA,EAAMmC,KAAKD,GACX,EAAKlB,SAAS,CACVhB,W,wEAKA,OACE,yBAAKQ,UAAU,aACf,0CACA,kBAAC,EAAD,CAAMR,MAAOyB,KAAKZ,MAAMb,MAAOC,OAAQwB,KAAKxB,SAC5C,kBAAC,EAAD,CAAKsB,QAASE,KAAKF,e,GAjCPM,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.f0ce2f30.chunk.js","sourcesContent":["import React from 'react';\n\nconst List = (props) => {\n\nconst {items , remove} = props;\nlet length = items.length;\nconst list = length ? (\n\nitems.map( (item) => {\nreturn(\n    <div key={item.id} >\n    <span className='name' >{item.name}</span>\n    <span className='age' >{item.age}</span>\n    <span className='action icon' onClick={ () => {remove(item.id)} } >&times;</span>\n    </div>\n)\n}\n) ) : (\n    <p>No items</p>\n)\n\n\n \nreturn(\n<div className='list' >\n    <span className='name title'>Name</span>\n    <span className='age title' >Age</span>\n    <span className='action title' >Action</span>\n    {list}\n</div>\n    )\n}\n\nexport default List;","import React , {Component} from 'react';\n\nclass Add extends Component{\n\n state = {\n     id:'',\n     name:'',\n     age:''\n }\n\nchange = (e) => {\nthis.setState({\n    id: Math.random(),\n    [e.target.id]: e.target.value\n})\n}\n\nsubmit = (e) => {\n    e.preventDefault();\n   if(e.target.name.value === '' || e.target.age.value === '' ){\n    return false\n}\nelse{\n    this.props.additem(this.state);\n    this.setState({\n        name:'',\n        age:''\n   \n    })\n}}\n\n    render(){\n        return(\n    <div>\n        <form onSubmit={this.submit} >\n        <input className='btm' type='text' placeholder='Enter Name' id='name' onChange={this.change} value={this.state.name} />\n        <input  className='btm' type='number' placeholder='Enter Age' id='age' onChange={this.change} value={this.state.age} />\n        <input className='title btn btm' type='submit' value='add' />\n        </form>\n    </div>\n        )\n    }\n}\n\nexport default Add;","import React , {Component} from 'react';\nimport './App.css';\nimport './index.css';\nimport List from './components/list'\nimport Add from './components/add';\n\nclass App extends Component{\n\nstate = {\n\nitems:  [\n    {id:1 , name: 'Ramy' , age: 27},\n    {id:2 , name: 'Hamza' , age: 23},\n    {id:3 , name: 'Ahmed' , age: 30}\n  ]\n}\n\nremove = (i) => {\nlet items = this.state.items.filter( (im) => {\n  return im.id !== i\n} )\nthis.setState({\n  items\n})\n}\n\nadditem = (n) => {\nlet items = this.state.items;\nitems.push(n);\nthis.setState({\n    items\n  })\n  }\n\n  render(){\n    return(\n      <div className='container' >\n      <h1>To do list</h1>\n      <List items={this.state.items} remove={this.remove} />\n      <Add additem={this.additem} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}